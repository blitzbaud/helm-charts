{{- if .Values.grafana.enabled }}
---
# ConfigMap for Grafana provisioning - datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: {{ .Values.global.namespace | default "openwebui" }}
  labels:
    {{- $data := dict "root" . "component" "grafana" }}
    {{- include "owui-stack.componentLabels" $data | nindent 4 }}
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:{{ .Values.prometheus.service.port }}
        isDefault: true
        jsonData:
          timeInterval: 30s
          manageAlerts: true
          prometheusType: Prometheus
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:{{ .Values.loki.service.port }}
        jsonData:
          maxLines: 1000
      - name: Mimir
        type: prometheus
        access: proxy
        url: http://mimir:{{ .Values.mimir.service.port }}/prometheus
        jsonData:
          timeInterval: 30s
          manageAlerts: true
          prometheusType: Mimir
---
# ConfigMap for Grafana provisioning - dashboard providers
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: {{ .Values.global.namespace | default "openwebui" }}
  labels:
    {{- $data := dict "root" . "component" "grafana" }}
    {{- include "owui-stack.componentLabels" $data | nindent 4 }}
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
      - name: 'Kubernetes'
        orgId: 1
        folder: 'Kubernetes'
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/kubernetes
      - name: 'OpenWebUI'
        orgId: 1
        folder: 'OpenWebUI'
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/openwebui
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace | default "openwebui" }}
  labels:
    {{- $data := dict "root" . "component" "grafana" }}
    {{- include "owui-stack.componentLabels" $data | nindent 4 }}
spec:
  type: {{ .Values.grafana.service.type }}
  ports:
    - port: {{ .Values.grafana.service.port }}
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    {{- $data := dict "root" . "component" "grafana" }}
    {{- include "owui-stack.componentSelectorLabels" $data | nindent 4 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace | default "openwebui" }}
  labels:
    {{- $data := dict "root" . "component" "grafana" }}
    {{- include "owui-stack.componentLabels" $data | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- $data := dict "root" . "component" "grafana" }}
      {{- include "owui-stack.componentSelectorLabels" $data | nindent 6 }}
  template:
    metadata:
      labels:
        {{- $data := dict "root" . "component" "grafana" }}
        {{- include "owui-stack.componentSelectorLabels" $data | nindent 8 }}
    spec:
      {{- include "owui-stack.imagePullSecrets" . | nindent 6 }}
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      initContainers:
        - name: init-dashboard-directories
          image: busybox:1.33
          command: ['sh', '-c', 'mkdir -p /var/lib/grafana/dashboards/kubernetes /var/lib/grafana/dashboards/openwebui && chown -R 472:472 /var/lib/grafana/dashboards']
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
      containers:
        - name: grafana
          image: "{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}"
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "owui-stack.fullname" . }}-secrets
                  key: GRAFANA_ADMIN_USER
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "owui-stack.fullname" . }}-secrets
                  key: GRAFANA_ADMIN_PASSWORD
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_SERVER_ROOT_URL
              value: "http://localhost:{{ .Values.grafana.service.port }}"
            - name: GF_LOG_LEVEL
              value: "debug"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel,grafana-kubernetes-app"
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboard-providers
              mountPath: /etc/grafana/provisioning/dashboards
            {{- if .Values.grafana.dashboards.enabled }}
            - name: grafana-dashboards-k8s
              mountPath: /var/lib/grafana/dashboards/kubernetes
            {{- end }}
          resources:
            {{- toYaml .Values.grafana.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            timeoutSeconds: 5
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: grafana-data
          {{- if .Values.grafana.persistence.enabled }}
          persistentVolumeClaim:
            claimName: grafana-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboard-providers
          configMap:
            name: grafana-dashboard-providers
        {{- if .Values.grafana.dashboards.enabled }}
        - name: grafana-dashboards-k8s
          configMap:
            name: grafana-dashboards-k8s
        {{- end }}
{{- if .Values.grafana.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: {{ .Values.global.namespace | default "openwebui" }}
  labels:
    {{- $data := dict "root" . "component" "grafana" }}
    {{- include "owui-stack.componentLabels" $data | nindent 4 }}
spec:
  accessModes:
    - {{ .Values.grafana.persistence.accessMode | default "ReadWriteOnce" }}
  resources:
    requests:
      storage: {{ .Values.grafana.persistence.size | default "5Gi" }}
  {{- if .Values.grafana.persistence.storageClass }}
  {{- if (eq "-" .Values.grafana.persistence.storageClass) }}
  storageClassName: ""
  {{- else }}
  storageClassName: "{{ .Values.grafana.persistence.storageClass }}"
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}